Flexbox는 1차원 레이아웃으로 설계되어 항목을 행 또는 열로 배치하지만
한 번에 둘 다 처리하지는 않는다. 그러나 flex 항목을 새 줄로 줄 바꿈하여
flex-direction: row가 있으면 새 행을 만들고 column이면 새 열을 만드는
기능이 있다.


flex-wrap의 초기값은 nowrap이다. 즉, 컨테이너에 비해 너무 넓은 플렉스 항목
세트가 있으면 overflow된다. 줄 바꿈하려면 flex-wrap: wrap 속성을 추가하거나
flex-flow를 사용해야 한다.

줄 바꿈을 하면 항목이 컨테이너에 래핑된다. 
flex-direction: row-reverse로 설정하면 item이 컨테이너의 끝 가장자리에서
시작하여 역순으로 배치된다. 반전은 인라인 방향에서만 발생한다.


1차원 레이아웃 설명
항목이 확장 및 축소될 수 있는 경우 마지막 행이나 열에 항목이 더 적으면
해당 항목이 증가하여 사용 가능한 공간을 채운다.

플렉스박스에는 한 행의 항목이 위의 행에 있는 항목과 정렬되도록 지시하는 방법이
없으며, 각 플렉스 라인은 새로운 플렉스 컨테이너처럼 작동한다.

마지막 항목의 크기도 래핑하고 싶다면 grid를 사용.
행 단위로 공간 분포를 원하면 flexbox를 사용하고 그렇지 않은 경우
grid를 사용해라.



플렉스박스 기반 그리드 시스템
flex 항목에 백분율 너비를 할당하면 2차원 레이아웃의 느낌을 받을 수 있다.

flex-wrap: wrap;
flex: 0 0 33.3333%를 설정하여 유연성을 제어.

그러나 대부분의 경우 이러한 방식으로 플렉스 항목에 너비를 추가하면
해당 구성 요소에 대한 그리드 레이아웃으로 전환하는 것이 더 나은 결과를
얻을 수 있다.



항목 사이에 여백 만들기
플렉스 항목 사이에 간격을 만드려면 gap 속성을 사용한다.
그러나 항목 사이에 공간을 넣을 수 있는 것은 gap 속성만이 아니다.

justify-content, align-content 속성도
여백, 패딩, 여백의 크기를 증가시켜 간격의 실제 크기에 영향을 줄 수 있다.



!축소된 항목
플렉스 항목에서 visibility: collpase를 지정하면 플렉스 항목이 축소된
플렉스 항목이 되어 visibility: collapse on a table-row or table-column 
: cpllapsed flex item이 렌더링에서 완전히 제거되지만 플렉스 라인의
크로스 사이즈를 안정적으로 유지하는 스트럿이 남는다.

따라서 플렉스 컨테이너에 플렉스 선이 하나만 있는 경우 항목을 동적으로
축소하거나 축소 해제하면 플렉스 컨테이너의 기본 크기가 변경될 수 있지만
cross 크기에는 영향을 주지 않으며 나머지 나머지 페이지 레이아웃이 
흔들리지 않는다. 그러나 플렉스 라인 래핑은 축소 후 다시 수행되므로
여러 라인이 있는 플렉스 컨테이너의 교차 크기는 변경될 수도 있다.

이 행동은 JS를 사용하여 플렉스 항목을 대상으로 하여 콘텐츠를 표시하거나
숨기려는 경우에 유용하다.

.hide { visibility: collapse }



display: none과 visibility: hidden의 차이점
display: none은 해당 항목이 페이지의 서식 구조에서 제거된다.
이것이 실제로 의미하는 바는 카운터가 이를 무시하고 전환과 같은 것이
실행되지 않는다는 것이다.

visibility: hidden을 사용하면 상자가 서식 구조에 유지되므로 사용자가
볼 수 없는 경우에도 레이아웃의 일부인 것처럼 동작한다는 점에서 유용하다.