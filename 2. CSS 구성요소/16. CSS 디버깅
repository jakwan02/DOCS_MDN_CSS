브라우저 DevTools에 엑세스
브라우저 개발자 도구란 다양한 브라우저 및 플랫폼에서 도구에 엑세스하는
방법을 설명하는 최신 가이드이다.

DOM versus view source
렌더링된 DOM에서 브라우저는 잘못 작성된 HTML을 수정하여 HTML을 정규화했을 수 있다.
DOM은 JS에 의해 변경된 사항도 표시한다.

뷰 소스는 서버에 저장된 HTML 소스 코드이다.
DevTools의 HTML 트리는 주어진 시간에 브라우저가 렌더링하는 내용을
정확하게 보여주므로 실제로 무슨 일이 일어나고 있는지에 대한 통찰력을 제공한다.


적용된 CSS 검사
페이지에서 요소를 마우스 오른쪽 버튼/ctrl 키를 누른 채 클릭하고 Inspect(검사)를
선택하거나 DevTools 디스플레이 왼쪽의 HTML 트리에서 요소를 선택한다.

HTML 오른쪽에 있는 규칙 보기를 보면 해당 요소에 적용된 CSS 속성과 값을 볼 수 있다.
클래스에 직접 적용된 규칙과 상위 항목에서 상자에 상속되는 CSS도 볼 수 있다.
이것은 예상하지 못한 CSS가 적용되는 경우에 유용하다.

부모 요소에서 상속되고 이 요소의 컨텍스트에서 덮어쓰는 규칙을 추가해야 할 수 있다.

작은 화살표를 클릭하여 보기를 확장하면 다양한 longhand 속성과 해당 값이 표시된다.
해당 패널이 활성화되었을 때 규칙 보기의 값을 켜고 끌 수 있다.

이를 사용하여 A/B 비교를 수행하고, 어떤 것이 좋아 보이는지 여부를 결정하고,
레이아웃이 잘못되어 문제를 일으키는 속성을 파악하려는 경우와 같이 디버그하는데 도움을 준다.


값 편집
속성을 켜고 끄는 것 외에도해당 값을 편집할 수 있다.
DevTools를 사용하면 스타일시트를 편집하고 페이지를 새로고침하는데 많은 시간을 절약할 수 있다.


새 속성 추가
DevTools를 사용하여 속성을 추가할 수 있따.
규칙에서 닫는 중괄호를 클릭하여 새 선언을 입력하기 시작할 수 있다.


박스 모델 이해
DevTools는 요소의 크기가 계산되는 방식을 이해하는데 도움이 될 수 있다.

레이아웃 보기에는 선택한 요소에 대한 상자 모델 다이어그램과 함께
요소의 배치 방식을 변경하는 속성 및 값에 대한 설명이 표시된다.

세부 속성 중 하나인 box-sizing은 요소가 사용하는 상자 모델을 제어하는 속성이다.
content-box를 사용하는 box1이 border-box를 사용하는 box2보다 시각적으로 더 넓다.
이것은 요소에 부여한 크기를 취한 다음 패딩과 테두리 너비에 추가하는 값이다.


특이성 문제 해결
때로는 개발 중에, 특히 기존 사이트에서 CSS를 편집해야 할 때 CSS를 적용하는 데 어려움을
겪을 수 있다. 일반적으로 일어나는 일은 더 구체적인 선택기가 변경 사항을 재정의하고 있으며
여기에서 DevTools가 도움이 될 것이다.

.special 클래스로 <em>을 검사하면 DevTools가 주황색이 적용되는 색상이며
<em>에 적용된 색상 속성이 지워져있음을 보여준다.



유효한 HTML과 CSS
브라우저는 CSS와 HTMl이 올바르게 작성되기를 기대하지만 브라우저는 매우 관대하며
마크업이나 스타일시트에 오류가 있더라도 웹 페이지를 표시하기 위해 최선을 다한다.
따라서 유효성 검사기를 통해 HTML 및 CSS를 실행하여 오류를 선택하고 수정해라.


테스트 중인 브라우저에서 속성과 값을 지원합니까?
브라우저는 이해하지 못하는 CSS를 무시한다.
DevTools는 일반적으로 어떤 식으로든 지원되지 않는 속성과 값을 강조 표시한다.


문제의 축소된 테스트 케이스 만들기
위의 단계로 문제가 해결되지 않으면 좀 더 조사해야 한다.

축소 테스트 사례는 관련 없는 주변 콘텐츠 및 스타일을 제거하여 가능한 가장
간단한 방법으로 문제를 보여 주는 코드 예제이다. 이것은 종종 레이아웃에서 문제가 있는
코드를 제거하여 해당 코드나 기능만 보여주는 작은 예제를 만드는 것을 의미한다.

축소된 테스트 사례를 만들려면 다음을 수행한다.
1. 마크업이 동적으로 생성되는 경우 문제를 보여주는 출력의 정적 버전을 만든다.
CodePen과 같은 코드 공유 사이트는 온라인에서 엑세스할 수 있고 동료와 쉽게 공유할 수 있으므로
축소된 테스트 케이스를 호스팅하는데 유용하다. 
페이지에서 소스보기를 수행하고 HTML을 CodePen에 복사한 다음 관련 CSS 및 JS를 가져와서 포함할 수 있다.
그런 다음 문제가 여전히 분명한지 확인할 수 있다.

2. JS를 제거해도 문제가 해결되지 않으면 JS를 포함하지 마라. JS를 제거하여 문제가 해결되면
가능한 많은 JS를 제거하고 문제의 원인이 무엇이든 남겨둔다.

3. 문제에 기여하지 않는 HTML을 제거한다. 레이아웃의 구성 요소 또는 주요 요소를 제거한다.
다시 말하지만, 문제를 보여주는 가장 작은 양의 코드로 내려가라.

4. 문제에 영향을 주지 않는 CSS를 제거해라.

이 과정에서 문제의 원인을 발견하거나 최소한 특정 항목을 제거하여 문제를 켜고 끌 수 있다.
항목을 발견할 때 코드에 몇 가지 주석을 추가하는 것이 좋다.

여전히 문제를 해결하는데 어려움을 겪고 있다면 포럼에 게시하거나 동료에게 보여줌으로써 도움을 요청할 수 있다.
