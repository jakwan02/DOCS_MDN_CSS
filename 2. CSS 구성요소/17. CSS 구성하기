더 큰 스타일 시트와 큰 프로젝트에서 작업을 시작하면 거대한 CSS 파일을
유지 관리하는 것이 어려울 수 있음을 알게 될 것이다.

CSS를 쉽게 유지 관리 할 수 있도록 작성하는 몇 가지 모범 사례와 유지 관리를
개선하는데 도움이 되는 다른 사람들이 사용하는 몇 가지 솔루션을 간략하게 살펴보자.


CSS를 깔끔하게 유지하기 위한 팁

- 프로젝트에 코딩 스타일 가이드가 있나?
기존 프로젝트에서 팀과 함께 작업하는 경우 가장 먼저 확인해야 할 것은 프로젝트에
CSS에 대한 기존 스타일 가이드가 있는지 여부이다.

- 일관성 유지
프로젝트에 대한 규칙을 설정하거나 혼자 작업하는 경우 가장 중요한 것은 일관성 유지다.
일관성은 클래스에 대해 동일한 명명 규칙을 사용하거나, 색을 설명하는 한 가지 방법을 
선택하거나, 일관된 서식을 유지하는 등 모든 종류의 방법으로 적용할 수 있다.

- 읽을 수 있는 CSS 서식 지정
일부 개발자는 모든 규칙을 한 줄에 넣지만 다른 개발자들은 모든 것을 
새로운 줄로 나누는 것을 선호한다. 각 속성과 값 쌍을 새 줄에 두는 것이 
더 읽기 쉽다.

- CSS에 주석 달기
CSS에 주석을 추가하면 향후 개발자가 CSS 파일로 작업하는데 도움이 될 뿐만 아니라
휴식 후 프로젝트로 돌아올 때도 도움이 된다.

좋은 팁은 스타일 시트의 논리적 섹션 사이에 주석 블록을 추가하여 스캔 할 때 다른 섹션을
빠르게 찾거나 CSS의 해당 부분으로 바로 이동하기 위해 검색할 수 있는 항목을 제공하는 것이다.

코드에 나타나지 않는 문자열을 사용하는 경우 해당 문자열을 검색하여 섹션에서 섹션으로
이동할 수 있다. ||

CSS의 모든 것에 주석으로 달 필요는 없다. 당신이 논평해야 할 것은 당신이 어떤 이유로 특정한
결정을 내린 것들이다. 예를 들어 이전 브라우저 비호환성을 해결하기 위해 특정 방식으로
CSS 속성을 사용했을 수 있다.

- 스타일 시트에 논리적 섹션 만들기
스타일시트에서 모든 공통 스타일을 먼저 사용하는 것이 좋다.
이것은 해당 요소로 특별한 작업을 수행하지 않는 한 적용되는 모든 스타일을
의미한다. 일반적으로 다음에 대한 규칙이 설정된다.

body
p
h1, ..., h2, h3
ul, ol
속성 table
링크

- 지나치게 구체적인 선택기 피하기
매우 구체적인 선택기를 만드는 경우 동일한 규칙을 다른 요소에 적용하기 위헤
CSS 청크를 복제해야 하는 경우가 종종 있다.
article.main p.box {
  border: 1px solid #ccc;
}

- 큰 스타일시트를 여러 개의 작은 스타일시트로 나눈다.



도움이 될 수 있는 다른 도구
CSS 자체는 내장된 조직 방식이 별로 없다. 따라서 CSS의 일관성 수준은 크게 달라진다.
웹 커뮤니티는 더 큰 CSS 프로젝트를 관리하는데 도움이 될 수 있는 다양한 도구와 접근 방식을 개발했다.

- CSS 방법론
CSS 작성에 대한 자체 규칙을 제시할 필요 없이 커뮤니티에서 이미 설계하고 많은
프로젝트에서 테스트한 접근 방식 중 하나를 채택하는 것이 도움이 될 수 있다.

이러한 방법론은 본질적으로 CSS를 작성하고 구성하는데 매우 구조화된 접근 방식을 취하는
CSS 코딩 가이드이다. 일반적으로 CSS를 더 장황하게 렌더링하는 경향이 있다.

- OOCSS(Object Oriented CSS)
OOCSS의 기본 개념은 CSS를 재사용 가능한 객체로 분리하여 사이트의 필요한 모든 곳에서
사용할 수 있도록 하는 것이다.

OOCSS에서는 두 패턴에 대한 모든 공통 CSS를 갖는 하나의 패턴, 즉 일반적으로
미디어 객체의 형태에 대한 기본 클래스를 만든다. 그런 다음 작은 차이점을 처리하기 위해
클래스를 추가하여 특정 방식으로 스타일을 확장한다.

- BEM(Block Element Modifier)
BEM에서 블록은 버튼, 메뉴 또는 로고와 같은 독립형 엔티티이다.
요소는 목록 항목 또는 해당 요소가 있는 블록에 연결된 제목과 같은 것이다.

BEM 명명 규칙에 대한 페이지에서 이 HTML에 적용된 클래스를 살펴보자.
<form class="form form--theme-xmas form--simple">
  <label class="label form__label" for="inputId"></label>
  <input class="form__input" type="text" id="inputId" />

  <input
    class="form__submit form__submit--disabled"
    type="submit"
    value="Submit" />
</form>

추가 클래스는 OOCSS 예제에서 사용된 클래스와 유사하지만 BEM의 엄격한 명명 규칙을 사용한다.
BEM은 대규모 웹 프로젝트에서 널리 사용되며 많은 사람들이 이러한 방식으로 CSS를 작성한다.

- 다른 일반적인 시스템
SMACSS(Scalable and Modular Architecture for CSS)
ITCSS
ACSS(Atomic CSS)

이러한 접근 방식 중 하나를 사용하는 프로젝트를 발견하면 동일한 스타일로
코딩하는 방법을 이해하는데 도움이 되는 많은 문서와 가이드를 검색하고 찾을 수 있다는 장점이 있다.

이러한 시스템을 사용할 때 단점은 특히 소규모 프로젝트의 경우 지나치게 복잡해 보일 수 있다는 것이다.



CSS용 시스템 구축
CSS를 구성하는 또 다른 방법은 프론트엔드 개발자가 사용할 수 있는 일부 도구를 활용하여
CSS 작성에 약간 더 프로그래밍 방식으로 접근할 수 있도록 하는 것이다.

우리가 전처리기(pre-processors)와 후처리기(post-processor)라고 부르는 많은 도구들이 있다.
전처리기는 원시 파일을 실행하여 스타일시트로 변환하는 반면, 후처리기는 완성된
스타일시트를 가져와서 더 빨리 로드할 수 있도록 최적화하기 위해 작업을 수행한다.

이러한 도구를 사용하려면 개발 환경에서 전처리 및 후처리를 수행하는 스크립트를 수행할 수 있어야 한다.

가장 널리 사용되는 전처리기는 Sass이다. 다른 Sass 기능을 사용하지 않더라도 구성 측면에서
많은 도움이 된다.


변수 정의
CSS는 이제 기본 사용자 정의 속성을 가지므로 이 기능의 중요성이 점점 줄어들고 있다.
그러나 Sass를 사용할 수 있는 이유 중 하나는 프로젝트에서 사용되는 모든 색상과 글꼴을
설정으로 정의한 다음 프로젝트 전체에서 해당 변수를 사용할 수 있기 때문이다.

$base-color: #c6538c;

.alert {
  border: 1px solid $base-color;
}
다음과 같이 변수를 만들면 해당 색상이 필요한 모든 스타일시트를 통해 사용할 수 있다.

CSS로 컴파일되면 최종 스타일 시트에 다음 CSS가 표시된다.
.alert {
  border: 1px solid #c6538c;
}


컴포넌트 스타일시트 컴파일
위에서 CSS를 구성하는 한 가지 방법은 스타일 시트를 더 작은 스타일 시트로 나누는 것이라고
언급했다. Sass를 사용할 때 이것을 다른 수준으로 끌어 올릴 수 있으며 매우 작은 스타일 시트를
많이 가질 수 있다.

Sass에 포함된 기능을 사용하면 이러한 기능을 모두 하나 또는 소수의 스타일시트로 컴파일
하여 실제로 웹사이트에 연결할 수 있다.

// foundation/_index.scss
@use "code";
@use "lists";
@use "footer";
@use "links";

위에서 암시한 것처럼 부분이 모두 인덱스 파일에 로드되면 전체 디렉토리를
한 번에 다른 스타일시트에 로드할 수 있다.
// style.scss
@use "foundation";


최적화를 위한 후처리
많은 주석과 공백을 추가하여 스타일 시트에 크기를 추가하는 것이 걱정된다면
후처리 단계는 프로덕션 버전에서 불필요한 것을 제거하여 CSS를 최적화하는 것이다.

이를 위한 포스트 프로세서 솔루션의 예로는 cssnano가 있다.