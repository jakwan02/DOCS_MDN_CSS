CSS 그리드 레이아웃 이전에는 float 또는 기타 레이아웃 기능을 사용하여 구현했다.
레이아웃을 설정된 수의 열(예: 4, 6 또는 12)로 상상한 다음 이러한 가상 열 안에
콘텐츠의 열을 맞춘다.

CSS 그리드 레이아웃 이전의 레이아웃 및 그리드 시스템
떄때로 레거시 방법을 사용하는 그리드 시스템을 접하게 될 것이다.
작동 방식과 CSS 그리드 레이아웃과 다른 이유를 이해하는 것이 좋다.

2열 레이아웃
body {
  width: 90%;
  max-width: 900px;
  margin: 0 auto;
}

div:nth-of-type(1) {
  width: 48%;
  float: left;
}

div:nth-of-type(2) {
  width: 48%;
  float: right;
}
여기서 모든 너비에 백분율을 사용하고 있다는 것을 알 수 있다.
이것은 다른 화면 크기에 맞게 조정되고 더 작은 화면 크기에서 열 너비에 대해
동일한 비율을 유지하는 유동적인 레이아웃을 만들기 때문에 꽤 좋은 전략이다.


Creating simple legacy grid frameworks
대부분의 레거시 프레임워크는 float 속성의 동작을 사용하여 그리드처럼
보이는 것을 만들기 위해 한 열을 다른 열 옆에 부동시킨다.

가장 쉽게 만들 수 있는 유형의 그리드 프레임워크는 고정된 너비의 프레임워크이다.
우리는 12열 그리드를 만들 것이다. 12열 그리드가 6, 4, 3 및 2로 잘 나눌 수 있다.


간단한 고정 너비 그리드
* {
  box-sizing: border-box; // 전체 콘텐츠 너비에서 패딩을 뺀다.
}

body {
  width: 980px;
  margin: 0 auto;
}

.wrapper {
  padding-right: 20px;
}

.row {
  clear: both;  // 전체 12개의 열을 만드는 요소로 각 행을 완전히 채울 필요가 없다.
}

.col {
  float: left;
  margin-left: 20px;
  width: 60px;  // 열 사이의 여백은 너비가 20px 이므로 총 여백은 240px, 
                //즉 각 열의 너비는 720/12 = 60px
  background: rgb(255, 150, 150);
}

둘 이상의 열에 걸쳐 있는 레이아웃 컨테이너에는 너비 값을 필요한 
열 수(그 사이 여백 포함)로 조정하기 위해 특수 클래스가 제공되어야 한다.

/* Two column widths (120px) plus one gutter width (20px) */
.col.span2 {
  width: 140px;
}
/* Three column widths (180px) plus two gutter widths (40px) */
.col.span3 {
  width: 220px;
}
/* And so on… */
.col.span4 {
  width: 300px;
}


유동 grid 만들기
그리드는 잘 작동하지만 너비가 고정되어 있다.
우리는 브라우저 뷰포트에서 사용 가능한 공간에 따라 크기가 변하는 유연한 그리드를 원한다.
이를 위해 참조 픽셀 너비를 백분율로 바꿀 수 있다.

고정 너비를 유연한 백분율 기반 너비로 바꾸는 방정식은 다음과 같다.
target / context = result

열의 너비의 경우 타겟 너비는 60px이고 context는 960px wrapper이다.
60 / 960 = 0.0625

그런 다음 소수점 2자리 이동하여 백분율 6.25%를 제공한다.

거터 너비에 대해서도 동일한 작업을 수행해야 한다.
20 / 960 = 0.02083333
따라서 규칙의 왼쪽 20px 여백과 오른쪽 20px 패딩을 2.08333%로 바꿔야 한다.


그리드 업데이트
body {
  width: 90%;
  max-width: 980px; // 레이아웃이 너무 넓어지는 것을 방지
  margin: 0 auto;
}

.wrapper {
  padding-right: 2.08333333%;
}

.col {
  float: left;
  margin-left: 2.08333333%;
  width: 6.25%;
  background: rgb(255, 150, 150);
}

픽셀 너비가 아닌 백분율을 사용하도록 모든 규칙을 업데이트해야 한다.
/* Two column widths (12.5%) plus one gutter width (2.08333333%) */
.col.span2 {
  width: 14.58333333%;
}
/* Three column widths (18.75%) plus two gutter widths (4.1666666) */
.col.span3 {
  width: 22.91666666%;
}
/* And so on… */
.col.span4 {
  width: 31.24999999%;
}



calc() 함수를 사용한 더 쉬운 계산
이 함수는 CSS에 간단한 수학 방정식을 삽입하고, 값이 무엇인지
계산할 수 있게 해준다. 복잡한 수학을 수행해야 할 때 유용하다.

.col.span2 {
  width: calc((6.25% * 2) + 2.08333333%);
}
.col.span3 {
  width: calc((6.25% * 3) + (2.08333333% * 2));
}
.col.span4 {
  width: calc((6.25% * 4) + (2.08333333% * 3));
}



의미론적 그리드 시스템 vs 비의미론적 그리드 시스템
콘텐츠를 설명하는 클래스의 의미론적 사용이 아니라 콘텐츠가 어떻게 보이는지
설명하는 의미론적으로 설명되는 CSS 클래스의 사용을 가끔 볼 것이다.
span2 span3와 같은 클래스의 경우이다.

이것은 유일한 접근 방식은 아니다. 대신 그리드를 결정한 다음 기존 의미 체계
클래스에 대한 규칙에 크기 조정 정보를 추가할 수 있다.

예를 들어, 8개의 열에 걸쳐 원하는 클래스가 있는 div가 있는 경우 클래스에서
너비를 가로 질러 복사하여 다음과 같은 규칙을 제공할 수 있다.
.content {
  width: calc((6.25% * 8) + (2.08333333% * 7));
}
(Sass와 같은 전처리기를 사용하는 경우 간단한 혼합을 만들어 해당 값을 삽입할 수 있다.)


그리드에서 오프셋 컨테이너 활성화
첫 번째 컨테이너 앞이나 컨테이너 사이에 빈 열 공간을 남겨두려면
오프셋 클래스를 만들어 사이트에 왼쪽 여백을 추가하여 그리드를 가로질러
시각적으로 푸시해야 한다.

.offset-by-one {
  margin-left: calc(6.25% + (2.08333333% * 2));
}


float 그리드 제한 사항
이와 같은 시스템을 사용할 때는 전체 너비가 올바르게 합산되고 행에 포함될 수
있는 것보다 더 많은 열에 걸쳐 있는 요소를 행에 포함하지 않도록 주의해야 한다.

또한 요소의 내용이 차지하는 행보다 넓어지면 넘쳐서 엉망이 될 수 있음을 명심.

이 시스템의 가장 큰 한계는 본질적으로 1차원적이라는 것이다.
열, 열을 가로지르는 요소를 다루지만 행은 다루지 않는다.

이러한 오래된 레이아웃 방법으로는 명시적으로 높이를 설정하지 않고 요소의 높이를
제어하는 것이 매우 어려우며, 이는 매우 융통성 없는 접근 방식이기도 하다.


플렉스박스 그리드?
flexbox가 그리드 시스템을 만드는데 이상적인 솔루션이라고 생각할 수 있다.

그러나 flexbox는 그리드 시스템으로 설계된 적이 없으며 하나로 사용될 때
새로운 문제를 제기한다.

body {
  width: 90%;
  max-width: 980px;
  margin: 0 auto;
}

.wrapper {
  padding-right: 2.08333333%;
}

.row {
  display: flex;
}

.col {
  margin-left: 2.08333333%;
  margin-bottom: 1em;
  width: 6.25%;
  flex: 1 1 auto;
  background: rgb(255, 150, 150);
}
여기서는 각 행을 플렉스 컨테이너로 전환한다.
flex 속성의 첫 번째 값(flex-grow)을 1로 설정하여 항목이 커지도록 하고,
두 번째 값(flex-shrink)을 1로 설정하여 항목이 축소되도록 하고,
세 번째 값(flex-basis)을 auto로 설정한다. 요소에 너비가 설정되어 있으므로
해당 너비를 값으로 사용한다.

맨 윗줄에는 그리드에 12개의 상자가 있으며 뷰포트 너비를 변경함에 따라
똑같이 커지고 줄어든다. 그러나 다음 줄에는 4개의 항목만 있으며
이러한 항목도 60px 기준에서 확장 및 축소된다.

그 중 4개만 있으면 위의 행에 있는 항목보다 훨씬 더 많이 자랄 수 있으며
그 결과 두 번째 행에서 모두 같은 너비를 차지한다.


이 문제를 해결하려면 해당 요소에 사용되는 값을 대체할 너비를 제공하는 클래스를
포함해야 한다. span flex-basis

Flexbox는 1차원으로 설계되어 있다. 즉 행 또는 열의 차원을 처리한다.
열과 행에 대해 엄격한 그리드를 만들 수 없으므로 그리드에 flexbox를
사용하려면 float 레이아웃과 마찬가지로 백분율을 계산해야 한다.

프로젝트에서 flexbox가 float에 대해 제공하는 추가 정렬 및 공간 분배 기능으로 인해
flexbox 그리드를 사용하도록 선택할 수 있다. 
그러나 설계된 목적이 아닌 다른 용도로 도구를 계속 사용하고 있다는 사실을 알고 있어야 한다.


Third party(제3자) 그리드 시스템
이제 그리드 계산의 이면에 있는 수학을 이해했으므로 일반적으로 사용되는
타사 그리드 시스템 중 일부를 살펴볼 수 있다.

웹에서 CSS 그리드 프레임워크를 검색하면 선택할 수 있는 방대한 옵션 목록을 찾을 수 있다.
Bootstrap 및 Foundation과 같은 인기 있는 프레임워크에는 그리드 시스템이 포함된다.
CSS를 사용하거나 전처리기를 사용하여 개발된 독립형 그리드 시스템도 있다.

간단한 CSS 프레임워크인 Skeleton을 살펴보겠다.

<link href="normalize.css" rel="stylesheet" />
<link href="skeleton.css" rel="stylesheet" />
스켈레톤을 포함하고 head에 다음을 추가하여 HTML 페이지에 CSS를 정규화한다.
(Normalize는 매우 유용한 작은 CSS 라이브러리로 몇 가지 유용한 기본 레이아웃
수정을 자동으로 수행하고 브라우저간에 기본 요소 스타일을 보다 일관되게 만든다.)

스켈레톤을 사용하기 위해서는 wrapper div에 container 클래스를 부여해야 한다.
이렇게 하면 콘텐츠가 최대 너비 960픽셀로 가운데에 배치된다.

.container {
  position: relative;
  width: 100%;
  max-width: 960px;
  margin: 0 auto;
  padding: 0 20px;
  box-sizing: border-box;
}
Skeleton은 box-sizing 프로퍼티를 설정하므로, 이 요소의 패딩과 테두리가 전체 너비에 포함된다.

이제 컨테이너 상자를 배치해 보겠다. 스켈레톤은 12열 그리드를 기반으로 한다.
맨 위 줄 상자는 모두 한 열에 걸쳐 있도록 하는 클래스가 필요하다.
<div class="container">
  <div class="row">
    <div class="one column">1</div>
    <div class="one column">2</div>
    <div class="one column">3</div>
    /* and so on */
  </div>
</div>

<div class="row">
  <div class="one column">13</div>
  <div class="six columns">14</div>
  <div class="three columns">15</div>
  <div class="two columns">16</div>
</div>
다음으로, 두 번째 행 클래스의 컨테이너에 다음과 같이 확장해야 하는 열 수를 설정한다.


Skeleton.css 파일을 보면 이것이 어떻게 작동하는지 알 수 있다.
예를 들어 Skeleton에는 3개의 열 클래스가 추가된 스타일 요소에 대해 다음과 같이 정의되어 있다.
.three.columns {
  width: 22%;
}

Skeleton(또는 다른 그리드 프레임워크)이 하는 일은 마크업에 추가하여 사용할 수 있는
미리 정의된 클래스를 설정하는 것뿐이다. 이 백분율을 직접 계산하는 작업을 한 것과 똑같다.

보다시피 Skeleton을 사용할 때 CSS를 거의 작성하지 않아도 된다.
그러나 요즘 CSS 그리드 레이아웃을 사용하면 많은 개발자가 CSS가 제공하는 내장
기본 그리드를 사용하기 위해 이러한 프레임워크에서 벗어나고 있다.