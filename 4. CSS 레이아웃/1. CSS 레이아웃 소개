CSS 페이지 레이아웃 기술을 사용하면 웹 페이지에 포함된 요소를 가져와서
일반 레이아웃 흐름의 기본 위치, 주변의 다른 요소, 부모 컨테이너 및 
기본 뷰포트/창과 같은 요소를 기준으로 배치되는 위치를 제어할 수 있다.

페이지 레이아웃 기술
- 정상 흐름
- display 속성
- 플렉스 박스
- 그리드
- Floats
- 위치
- 테이블 레이아웃
- 다중 열 레이아웃

각 기술에는 용도, 장점 및 단점이 있다.



정상 흐름(Normal FLow)
아무 작업도 수행하지 않을 때 브라우저가 기본적으로 HTML 페이지를 배치하는 방법.

블록 요소 내용이 배치되는 방향은 블록 방향(Block Direction)으로 설명된다.
(수평 쓰기 모드일 경우 블록 방향은 세로로 실행된다.)

잘 구조화된 HTML DOC으로 시작하는 것은 매우 중요하다.
기본적으로 사물이 배치되는 방식으로 작업할 수 있기 때문.

CSS 요소가 배치되는 방식을 변경할 수 있는 방법
- display 속성: 블록 수준 요소가 인라인 수준 요소처럼 동작하도록 하여 요소가 일반 흐름에서
동작하는 방식을 변경할 수 있다.
또한 CSS Grid, Flexbox와 같은 특정 값을 통해 활성화되는 전체 레이아웃 메서드가
있으며, 이는 자식 요소가 부모 내부에 배치되는 방식을 변경한다.

- Floats: 레이아웃에서 이미지 주위에 텍스트가 떠 있는 것처럼 블록 수준 요소가
요소의 한 면을 따라 줄 바꿈될 수 있다.

- position 속성: 다른 박스 안에 박스 배치를 정밀하게 제어할 수 있다.

- Table layout: HTML 표의 각 부분에 스타일을 지정하기 위해 설계된 기능,
관련 속성을 사용하여 표가 아닌 요소에 사용할 수 있다. display: table

- Multi-column layout: 블록의 콘텐츠가 열로 레이아웃될 수 있다.



display 속성
이 속성을 사용하면 무언가에 표시되는 기본 방식을 변경할 수 있다.

예를 들어, 단락 안의 일부 텍스트 주위에 링크를 만들면 해당 링크는 텍스트의
나머지 부분과 인라인으로 유지되며 새 줄로 나뉘지 않는다. 
이 기본 표시 동작을 변경할 수 있다. display: block

li 요소는 기본적으로 영어 문서에서 목록 항목이 다른 항목 아래에 표시됨을 의미한다.
display: inline으로 문장처럼 옆에 표시된다.

모든 요소의 값을 변경할 수 있다는 사실은 HTML 요소가 어떻게 보일지 걱정하지 않고
의미론적 의미에 대해 HTML 요소를 선택할 수 있음을 의미한다.



플렉스박스
Flexbox는 FLexible Box Layout(유연한 상자 레이아웃) CSS 모듈의 줄임말로,
한 차원(행 또는 열)으로 쉽게 배치할 수 있도록 설계되었다.

flexbox를 사용하려면 배치하려는 요소의 부모 요소에 적용한다.
그러면 모든 직계 자식은 플렉스 아이템이 된다.


wrapper에 display: flex를 추가하면 block el인 div 요소들이 열로 정렬된다.
각 div는 flex 항목이 된다. 

부모 요소의 flex-direction의 값이 초기값이기 때문에
행에 표시된다. 
부모 요소의 align-items의 값이 초기값이기 때문에 모두 높이가 
늘어나는 것처럼 보인다.

즉, 항목이 플렉스 컨테이너의 높이까지 늘어나며, 이 경우 가장 높은 항목으로 정의된다.
항목은 모두 컨테이너의 시작 부분에 정렬되고 행의 끝에 추가 공간이 남는다.


- flex 속성 설정
플렉스 항목에 적용할 수 있는 속성도 있다.
이러한 속성은 항목이 구부러지는 방식을 변경하여 사용 가능한 공간에 따라
확장하거나 축소할 수 있다.

모든 자식 항목에 flex: 1을 추가하면 모든 항목이 커지고 마지막에
공간을 남기지 않고 컨테이너를 채운다. 
더 많은 공간이 있으면 항목이 더 넓어지고 공간이 적으면 좁아진다.



그리드 레이아웃
플렉스박스는 1차원 레이아웃을 위해 디자인된 반면, 그리드 레이아웃은
행과 열로 정렬되는 2차원을 위해 설계되었다.

flexbox와 유사하게 Gird Layout을 특정 표시 값으로 활성화한다.
display: grid를 사용하는 것 외에도 각각 grid-template-rows 및
grid-template-columms 속성을 사용하여 부모에 대한 일부 행 및 열 트랙을
정의한다.

row(행) 가로 column(열) 세로

.wrapper {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-rows: 100px 100px;
  gap: 10px;
}


그리드에 항목 배치
그리드가 있으면 자동 배치 동작에 의존하지 않고 그리드에 항목을 
명시적으로 배치할 수 있다.

grid-column 및 grid-row 속성을 사용하여 각 항목의 시작 줄과 끝 줄을 설정할 수 있다.

.box1 { // 1행 2~3열에 배치
  grid-column: 2 / 4;
  grid-row: 1;
}

.box2 { // 1열 1~2열에 배치
  grid-column: 1;
  grid-row: 1 / 3;
}


Floats
요소를 부동하면 해당 요소의 동작과 정상적인 흐름에서 그 뒤에 오는
블록 수준 요소가 변경된다. 부동 요소는 왼쪽 또는 오른쪽으로 이동하고
일반 흐름에서 제거되며 주변 콘텐츠는 그 주위에 떠 있다.

- left: 요소를 왼쪽으로 부동한다.
- right: 요소를 오른쪽으로 부동한다.
- none: 부동을 지정하지 않는다. 기본값.
- inherit: 속성 값이 요소의 부모 요소에서 상속되도록 지정한다.

<div class="box">Float</div>
<p>...</p>

.box {
  float: left;
  width: 150px;
  height: 150px;
  margin-right: 30px;
}
위 예는 박스를 왼쪽으로 floating하고 오른쪽에 여백을 주어 주변 텍스트를
밀어낸다. 이것은 boxed el을 둘러싼 텍스트의 효과를 제공한다.


포지셔닝 기술
위치 지정을 사용하면 정상적인 흐름으로 배치될 요소에서 다른 위치로 요소를
이동할 수 있다. 

position 속성에 의존하는 특정 레이아웃 패턴을 얻는데 유용한 기술이 있다.
위치를 이해하면 정상 흐름과 정상 흐름에서 항목을 이동하는 것이 무엇을 의미하는지
이해하는데 도움이된다.

5가지 포지셔닝
- Static positioning(정적 위치 지정): 모든 요소가 가져오는 기본값.
문서 레이아웃 흐름에서 요소를 정상적인 위치에 놓는다.

- Relative positioning(상대 위치 지정): 페이지에서 요소의 위치를 수정하여
일반 흐름의 위치를 기준으로 이동할 수 있을 뿐만 아니라 다른 요소와
겹치도록할 수 있다.

- Absolute positioning(절대 위치 지정): 요소가 별도의 레이어에 있는 것처럼
페이지의 일반 레이아웃 흐름에서 완전히 벗어난다.
상위 항목의 가장자리를 기준으로 하는 위치에 고정할 수 있다. 

- Fixed positioning(고정 위치 지정): 절대 위치 지정과 유사하지만 다른 요소가 
아니라 브라우저 뷰포트를 기준으로 요소를 고정한다. (영구 탐색 메뉴)

- Sticky positioning(고정 위치 지정): 요소가 뷰포트에서 정의된 오프셋에 
도달할 때까지 요소가 작동하도록 하는 새로운 위치 지정 방법

상대 포지셔닝
position: relative를 사용하면 정상 흐름의 기본 위치에서 항목을 오프셋할 수 있다.
.positioned {
  position: relative;
  top: 30px;  // 아래로 30px 이동(위로 30px만큼 민다.)
  left: 30px;  // 오른쪽으로 30px 이동(왼쪽으로 30px만큼 민다.)
}

절대 포지셔닝
position: absolute를 사용하여 일반 흐름에서 요소를 완전히 제거하고
대신 포함하는 블록의 모서리에서 오프셋을 사용하여 요소를 배치하는데 사용된다.
.positioned {
  position: absolute;
  top: 30px;
  left: 30px;
}

고정 포지셔닝
문서 흐름에서 요소를 제거하고 컨테이너에서 적용되는 오프셋 대신 뷰포트에서
적용된다. 페이지가 아래로 스크롤되어도 고정된다.
.positioned {
  position: fixed;
  top: 30px;
  left: 30px;
}

Sticky 포지셔닝
상대 포지셔닝과 고정 포지셔닝을 혼합한다.
정의한 뷰포트에서 오프셋에 도달할 때까지 일반 흐름으로 스크롤된다.
(지정한 뷰포트에 도달하면 고정 포지셔닝처럼 스크롤된다.)
.positioned {
  position: sticky;
  top: 30px;
  left: 30px;
}



테이블 레이아웃
HTML 테이블은 표 형식의 데이터를 표시하는데 적합하지만 몇 년 전만 해도
웹 개발자는 전체 웹 페이지 레이아웃에 테이블을 사용하여 머리글, 바닥글,
열 등을 넣었다. 

다양한 테이블 행과 열로 당시에는 효과가 있었지만 유연하지 않고,
마크업이 매우 무겁고, 디버그하기 어렵고, 의미상 잘못되었다.

레이아웃에 CSS 테이블을 사용하는 것은 이 시점에서 레거시 방법으로 간주되어야 하며
Flexbox 또는 Grid를 지원하지 않는 이전 브라우저를 지원하는 데만 사용해야 한다.



다중 열 레이아웃
Multi-column layout CSS Module은 신문에서 텍스트가 흐르는 방식과
유사하게 열에 콘텐츠를 배치하는 방법을 제공한다.

블록을 다중 열 컨테이너로 전환하려면 브라우저에 원하는 열 수를 알려주는
column-count 속성 또는 브라우저에 지정된 너비에 가능한 많은 열로 컨테이너를
채루도록 지시하는 column-width 속성을 사용한다.

.container {
  column-width: 200px;
}