이전 기술의 사용자를 잠그지 않고 최신 웹 기술을 사용하는 방법을 설명.

사이트의 브라우저 환경은 어떻나?
모든 웹사이트는 타겟 고객 측면에서 다르다. 접근 방식을 결정하기 전에
이전 브라우저를 사용하여 사이트를 방문하는 방문자 수를 확인해라.

분석이 없거나 새로운 사이트인 경우 위치별로 필터링된 통계를 제공할 수 있는
Statcounter와 같은 사이트가 있다.

또한 장치 유형과 사람들이 사이트를 사용하는 방식을 고려해야 한다.


사용하려는 기능에 대한 지원은 무엇인가?
사이트에 제공되는 브라우저를 알게 되면 해당 기술이 얼마나 잘 지원되는지,
해당 기술을 사용할 수 없는 방문자에게 대안을 얼마나 쉽게 제공할 수 있는지에
대해 사용하려는 기술을 평가할 수 있다.

기능이 얼마나 잘 지원되는지 알아보는 또 다른 인기있는 방법은 
Can I Use 웹 사이트이다. 이 사이트에는 대부분의 웹 플렛폼 기능과
브라우저 지원 상태에 대한 정보가 나열되어 있다.
위치별로 사용 통계를 볼 수 있으며, 주로 전 세계 특정 지역의 사용자가 있는
사이트가 있는 사이트에서 작업하는 경우에 유용하다.

Google Analytics 계정을 연결하여 사용자 데이터를 기반으로 분석을 얻을 수도 있다.

사용자가 보유하고 있는 기술과 사용하려는 항목에 대한 지원을 이해하면 모든 결정을
내리고 모든 사용자를 가장 잘 지원하는 방법을 알 수 있다.


지원은 "동일하게 보인다"는 것을 의미하지 않는다.
웹 사이트가 모든 브라우저에서 동일하게 보일 수는 없다.
일부 사용자는 이전 브라우저 버전을 사용하고 일부 사용자는 화면 판독기를 통해
콘텐츠를 읽어주는 것을 듣거나 페이지를 확대하여 읽을 수 있다.

잘 구성된 HTML 문서가 항상 출발점이 되어야 한다.
한 가지 옵션은 제한된 브라우저를 사용하는 사람들을 위한 대안으로 남겨두는 것.


CSS에서 fallback 만들기
브라우저가 이해하지 못하는 CSS를 무시한다는 지식과 결합하면 이미 다룬
레거시 기술을 사용하여 간단한 레이아웃을 만들 수 있으며,
이를 이해하는 최신 브라우저의 그리드 레이아웃으로 덮어쓴다.

- 그리드에서 플로트로 폴백
* {
  box-sizing: border-box;
}

.wrapper {
  background-color: rgb(79, 185, 227);
  padding: 10px;
  max-width: 400px;
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
}

.item {
  float: left;
  border-radius: 5px;
  background-color: rgb(207, 232, 220);
  padding: 1em;
}

<div class="wrapper">
  <div class="item">Item One</div>
  <div class="item">Item Two</div>
  <div class="item">Item Three</div>
</div>
다음 예에서는 세 개의 item을 플로트하여 연속으로 표시한다.
CSS 그리드 레이아웃을 지원하지 않는 모든 브라우저는 상자 행을 
플로트 레이아웃으로 볼 수 있다.

그리드 아이템이 되는 플로트 아이템은 플로트 동작을 잃게 되는데,
이는 wrapper를 그리드 컨테이너로 전환하면 플로트 아이템이 그리드 아이템이
된다는 것을 의미한다.

브라우저가 그리드 레이아웃을 지원하면 그리드 보기가 표시되고, 그렇지 않으면
display: grid 관련 속성을 무시하고 플로트 레이아웃이 사용된다.


Fallback 메서드
이 float 예제와 비슷한 방식으로 사용할 수 있는 레이아웃 메서드가 많이 있다.

Float and clear: 위에서 볼 수 있듯이 float 및 clear 속성은 float 또는
clear 항목이 플렉스 또는 그리드 항목이 되는 경우 레이아웃에서 더 이상 영향을 주지 않는다.

display: inline-block: 열 레이아웃을 만드는데 사용할 수 있으며, 항목이 설정되었지만
플렉스 또는 그리드 항목이 되는 경우 인라인 블록 동작은 무시된다.

display: table: 테이블 레이아웃을 만드는데 사용.
플렉스 또는 그리드 항목이 되면 표시 값이 무시된다.

Multiple-column Layout: 특정 레이아웃의 경우 multi-col을 대체로 사용할 수 있으며,
컨테이너에 정의된 column-* 속성이 있고 그리드 컨테이너가 되면 multicol 동작이 발생하지 않는다.

Flexbox as a Fallback for Grid: Flexbox는 IE10 및 11에서 지원되기 때문에 Grid보다
브라우저 지원이 더 많다. 플렉스 컨테이너를 그리드 컨테이너로 만들면 자식에 적용된
모든 속성이 무시된다.

대체 코드에 새 브라우저도 해석할 내용을 포함해야 하는 경우가 있다.
이에 대한 좋은 예는 플로트 항목에 백분율 너비를 추가하여 열을 그리드 표시와
비슷하게 만들고 컨테이너를 채우기 위해 늘리는 경우이다.

그리드 레이아웃에서는 백분율 너비가 아이템이 배치된 그리드 영역에서 계산된다.

이 문제를 해결하려면 Grid가 지원되는지 여부를 감지하여 너비를 재정의하는지
여부를 감지하는 방법이 필요하다. CSS는 여기에 대한 해결책을 가지고 있다.


기능 쿼리
Feature queries를 사용하면 브라우저가 특정 CSS 기능을 지원하는지 여부를 테스트할 수 있다.

@supports (display: grid) {
  .item {
    width: auto;
  }
}
CSS 그리드를 지원하지 않는 브라우저는 기능 쿼리를 지원하지 않는 경향이 있다.
앞으로는 기능 쿼리 지원이 없는 브라우저가 사라지기 때문에 지원 부족을 
확인하는 접근 방식이 작동할 것이다.


IE10 및 11 접두사가 붙은 Grid 버전
CSS 그리드 사양은 처음에 Internet Explorer 10에서 프로토타입으로 제작되었다.
즉, IE10 및 IE11은 최신 그리드를 지원하지 않지만 이 사이트에 문서화된
최신 사양과 다르지만 매우 유용한 그리드 레이아웃 버전을 가지고 있다.

그러나 이전 IE 버전에서 방문자 수가 매우 많지 않은 경우 지원되지 않는
모든 브라우저에서 작동하는 대체를 만드는데 집중하는 것이 좋다.


이전 브라우저 테스트
대부분의 브라우저가 Flexbox 및 Grid를 지원하므로 이전 브라우저를 테스트하는 것이
상당히 어려울 수 있다. 한 가지 방법은 cross browser 테스트 모듈에 자세히 설명된 대로
Sauce Labs와 같은 온라인 테스트 도구를 사용하는 것이다.

또한 가상 머신을 다운로드하여 설치할 수 있으며 컴퓨터의 포함된 환경에서 
이전 버전의 브라우저를 실행할 수 있다.