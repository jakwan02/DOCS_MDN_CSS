Flexbox는 항목을 행이나 열에 정렬하기 위한 1차원 레이아웃 방법.

왜 플렉스박스인가?
오랫동안 CSS 레이아웃을 만드는데 사용할 수 있는 신뢰할 수 있는 브라우저 간
호환 도구는 Float 및 position과 같은 기능뿐이었다.
이것들은 효과가 있지만 어떤 면에서는 제한적이다.

다음과 같은 간단한 레이아웃 디자인은 float, position 레이아웃 도구를
사용하여 편리하고 유연한 방식으로 달성하기 어렵거나 불가능하다.
- 부모 내부의 콘텐츠 블록을 세로로 가운데에 배치한다.

- 컨테이너의 모든 자식이 사용가능한 너비/높이에 관계없이 사용 가능한
너비/높이의 동일한 양을 차지하도록 한다.

- 다중 열 레이아웃의 모든 열이 다른 양의 콘텐츠를 포함하는 경우에도 동일한
높이를 채택하도록 한다.

flexbox를 사용하면 많은 레이아웃 작업을 훨씬 쉽게 수행할 수 있다.



플렉스 모델
요소가 플렉스 항목으로 배치되면 두 축을 따라 배치된다.
- main axis(메인 축): flex item이 배치되는 방향으로 실행되는 축이다.
이 축의 시작과 끝을 main start, main end라고 한다.

- cross axis(교차 축): flex item이 배치되는 방향에 수직으로 실행되는 축.
이 축의 시작과 끝을 cross start, cross end라고 한다.

- flex container: 여기에 설정된 부모 요소.

- flex items: 플렉스 컨테이너 내부에 플렉스 상자로 배치된 항목.


열(column), 행(row)
Flexbox는 main axis가 실행되는 방향(flexbox 자식이 배치되는 방향)을
지정하는 flex-direction이라는 속성을 제공한다.

기본적으로 이 설정은 row로 설정되어 있다.
row-reverse, column-reverse 값으로 플렉스 항목을 반대 방향으로 배치할 수도 있다.


Wrapping
레이아웃에 고정 너비 또는 높이가 있을 때 발생하는 한 가지 문제는
결국 플렉스 박스 하위 항목이 컨테이너를 오버플로하여 레이아웃이 손상된다는 것이다.

부모 요소에 flex-wrap: wrap을 추가하고,
플렉스 항목 요소에 flex: 200px를 추가하여 해결할 수 있다.

이제 여러 행이 있고 모든 오버플로는 다음 줄로 이동한다.


flex-flow 속기
flex-direction 및 flex-wrap에 대한 약어가 존재한다.

flex-flow: row wrap; // flex-direction flex-wrap


flex 항목의 flex 크기 조정
모든 flex 요소에 flex: 1을 지정하면 패딩 및 여백과 같은 속성이
설정된 후 남은 여유 공간을 모두 동일한 양으로 차지한다.

하나의 항목을 flex: 2로 설정하면 1+1+2=1이 되어야 하므로
4/2의 공간을 차지하게 된다.

또한 flex 값 내에서 최소 크기 값을 지정할 수도 있다.
flex: 1 200px;
이것은 기본적으로 각 플렉스 항목에는 먼저 사용 가능한 공간의 200px가
제공된다. 그 후 사용 가능한 나머지 공간은 비율 단위에 따라 공유된다.

flexbox의 진정한 가치는 유연성(flexibility)/응답성(responsiveness)에서
볼 수 있다. 브라우저 창의 크기를 조정하거나 다른 요소를 추가하면
레이아웃이 계속 제대로 동작한다.


Flex 속기
flex는 최대 3개의 서로 다른 값을 지정할 수 있는 약식 속성이다.
- 단위 없는 비율 값. flex-grow longhand 속성을 사용하여 별도로 지정 가능.

- 두 번째 단위 없는 비율 값인 flex-shrink는 플렉스 항목이 컨테이너를 넘칠
때 작동한다. 이 값은 overflow를 방지하기 위해 항목이 축소되는 정도를 지정.

- 최소 크기 값. flex-basis longhand 값을 사용하여 별도로 지정 가능.

꼭 필요한 경우가 아니라면 longhand flex 속성을 사용하지 않는 것이 좋다.
이로 인해 많은 코드가 작성되고 다소 혼란스러울 수 있다.


수평 및 수직 정렬
플렉스박스 피처를 사용하여 main-axis 또는 cross-axis를 따라 flex item을
정렬할 수 있다.

align-items는 flex item이 cross-axis에 놓이는 위치를 제어한다.
- stretch 값은 모든 flex item을 늘려 cross-axis 방향으로 부모를 채운다.

- center 값은 항목은 고유 차원을 유지하지만 cross axis를 따라 중앙에 배치된다.

- flex-start, flex-end와 같은 값을 가질 수 있으며. 이는 cross axis의 시작과 끝에서
모든 항목을 각각 정렬한다.


align-self 속성을 적용하여 개별 flex iem에 대한 align-items 동작을 재정의.
button:first-child {
  align-self: flex-end;
}


justify-content는 main axis에 있는 위치를 제어한다.
- flex-start 기본값. 모든 항목이 주 축의 시작 부분에 배치.

- flex-end: 모든 항목을 주 축의 끝 부분에 배치.

- center: flex item이 main axis의 중앙에 위치.

- space-around: 모든 항목을 주 축을 따라 균등하게 분배하고
양 쪽 끝에 약간의 공간이 남아 있다.

- space-between: space-around와 비슷하지만 양 쪽 끝에 공간을 남기지 않는다.



플렉스 아이템 순서
Flexbox에는 소스 순서에 영향을 주지 않고 플렉스 item의 레이아웃 순서를
변경하는 기능도 있다.

button:first-child {
  order: 1; // main axis 끝으로 이동.
}

- 기본적으로 모든 플렉스 항목의 order 값은 0이다.

- 지정된 순서 값이 더 높은 항목은 순서 값이 낮은 항목보다
표시 순서에서 나중에 표시된다.

- 주문 값이 동일한 flex item은 원본 순서로 표시된다.

음수 값을 설정하여 값이 0인 항목보다 먼저 항목이 표시되도록 할 수 있다.
button:last-child {
  order: -1;
}


중첩된 플렉스 박스
flex item을 flex container로 설정하여 자식도 flexbox처럼 배치.